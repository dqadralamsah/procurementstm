// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ========== ENUM ==========

enum RoleName {
  SUPER_ADMIN
  PURCHASING
  WAREHOUSE
}

enum ActivityType {
  LOGIN
  LOGOUT
  CREATE
  UPDATE
  DELETE
  APPROVE
  REJECT
  OTHER
}

enum PurchaseRequestStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
  REVISED
}

enum PurchaseOrderStatus {
  DRAFT
  SENT
  RECEIVED
  CANCELLED
}

enum PurchaseOrderItemStatus {
  PENDING
  RECEIVED
  PARTIAL
}

enum MutationType {
  IN
  OUT
  OPNAME
}

enum SourceType {
  PO
  MANUAL
  USAGE
  OPNAME
}

enum StockStatus {
  NORMAL
  LOW
  OVERSTOCK
}

// ========== MASTER DATA ==========

model Supplier {
  id          String    @id @default(uuid())
  name        String
  contact     String?
  email       String?
  address     String?
  createdAt   DateTime  @default(now())

  materials   MaterialSupplier[]        
  suppliersPO PurchaseOrder[]
}

model Material {
  id          String        @id @default(uuid())
  name        String
  category    String?
  description String?
  price       Float?
  unit        String?
  stock       Int           @default(0)
  minStock    Int           @default(0)
  maxStock    Int?
  safetyStock Int?
  status      StockStatus   @default(NORMAL)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  suppliers   MaterialSupplier[]
  itemsPR     PurchaseRequestItem[]
  itemsPO     PurchaseOrderItem[]
  mutations   StockMutation[]
}

model MaterialSupplier {
  materialId  String
  material    Material    @relation(fields: [materialId], references: [id], onDelete: Cascade)
  supplierId  String
  supplier    Supplier    @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  price       Float?
  minOrder    Int?

  @@id([materialId, supplierId])
}

// ========== USER & ROLE ==========

model Role {
  id    String      @id @default(uuid())
  name  RoleName    @unique
  users User[]
}

model User {
  id          String          @id @default(uuid())
  name        String
  email       String          @unique
  password    String
  roleId      String
  role        Role            @relation(fields: [roleId], references: [id], onDelete: Cascade)
  lastSignIn  DateTime?
  lastActive  DateTime?
  activities  LogActivity[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  requestedPR PurchaseRequest[]   @relation("Requester")
  approvedPR  PurchaseRequest[]   @relation("Approver")
  orderedPO   PurchaseOrder[]     @relation("Orderer")
  receivedPO  Receiving[]         @relation("Receiver")
}

model LogActivity {
  id          String        @id @default(cuid())
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        ActivityType  @default(OTHER)
  detail      String?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime      @default(now())
}

// ========== PURCHASE REQUEST ==========

model PurchaseRequest {
  id            String                  @id @default(uuid())
  status        PurchaseRequestStatus   @default(DRAFT)
  requesterId   String
  requester     User                    @relation("Requester", fields: [requesterId], references: [id], onDelete: Cascade)
  approvedById  String?
  approvedBy    User?                   @relation("Approver", fields: [approvedById], references: [id], onDelete: Cascade)
  approvedAt    DateTime?
  notes         String?
  items         PurchaseRequestItem[]
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt

  purchaseOrder PurchaseOrder[]
}

model PurchaseRequestItem {
  id                String            @id @default(uuid())
  purchaseRequestId String
  purchaseRequest   PurchaseRequest   @relation(fields: [purchaseRequestId], references: [id], onDelete: Cascade)
  materialId        String
  material          Material          @relation(fields: [materialId], references: [id], onDelete: Cascade)
  quantity          Int
  createdAt         DateTime          @default(now())
}

// ========== PURCHASE ORDER ==========

model PurchaseOrder {
  id                String                @id @default(uuid())
  status            PurchaseOrderStatus   @default(DRAFT)
  purchaseRequestId String?
  purchaseRequest   PurchaseRequest?      @relation(fields: [purchaseRequestId], references: [id], onDelete: Cascade)
  supplierId        String
  supplier          Supplier              @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  orderedById       String
  orderedBy         User                  @relation("Orderer", fields: [orderedById], references: [id], onDelete: Cascade)
  items             PurchaseOrderItem[]
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt

  receivedPO        Receiving[]
}

model PurchaseOrderItem {
  id              String                    @id @default(cuid())
  purchaseOrderId String
  purchaseOrder   PurchaseOrder             @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  materialId      String
  material        Material                  @relation(fields: [materialId], references: [id], onDelete: Cascade)
  quantity        Int
  price           Float
  status          PurchaseOrderItemStatus   @default(PENDING)

  receivingItems  ReceivingItem[]
}

// ========== RECEIVING ==========

model Receiving {
  id              String          @id @default(cuid())
  purchaseOrderId String
  purchaseOrder   PurchaseOrder   @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  receivedById    String
  receivedBy      User            @relation("Receiver", fields: [receivedById], references: [id], onDelete: Cascade)
  date            DateTime        @default(now())
  notes           String?

  items           ReceivingItem[]
}

model ReceivingItem {
  id                  String              @id @default(cuid())
  receivingId         String
  receiving           Receiving           @relation(fields: [receivingId], references: [id], onDelete: Cascade)
  purchaseOrderItemId String
  purchaseOrderItem   PurchaseOrderItem   @relation(fields: [purchaseOrderItemId], references: [id], onDelete: Cascade)
  quantity            Int
}

// ========== STOCK MUTATION ==========

model StockMutation {
  id          String          @id @default(cuid())
  materialId  String
  material    Material        @relation(fields: [materialId], references: [id], onDelete: Cascade)
  type        MutationType    
  source      SourceType
  quantity    Int
  createdAt   DateTime        @default(now())
}
